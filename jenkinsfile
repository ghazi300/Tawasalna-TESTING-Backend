pipeline {
    agent any
    environment {
        SONAR_TOKEN = credentials('scanner') // Assurez-vous d'avoir stocké votre token SonarQube dans Jenkins
    }
    stages {
        stage('Build All Modules') {
            steps {
                script {
                    // Exécute la construction pour tous les modules
                    sh 'mvn clean install -DskipTests' // Utilisez -DskipTests pour sauter les tests si vous souhaitez éviter d'attendre leur exécution
                }
            }
        }
        stage('Test and Analyze Modules') {
            steps {
                script {
                    def modules = [
                        'tawasalna-auth',
                        'tawasalna-administration',
                        'tawasalna-social',
                        'tawasalna-business',
                        'tawasalna-pms',
                        'tawasalna-MaintenanceAgent',
                        'tawasalna-crm',
                        'Management-Coordination',
                        'tawasalna-facilities-management',
                        'tawasalna-crisis',
                        'tawasalna-security-safety',
                        'tawasalna-operations',
                        'Resident-Support-Services'
                    ]

                    // Exécute les tests et l'analyse SonarQube pour chaque module
                    for (module in modules) {
                        echo "Running tests and analyzing module: ${module}"
                        // Exécute les tests
                        sh "mvn test -f ${module}/pom.xml"
                        // Exécute l'analyse SonarQube
                        sh """
                            mvn sonar:sonar \
                                -Dsonar.projectKey=${module}-key \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -f ${module}/pom.xml
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            // Archive les artefacts de tous les modules
            archiveArtifacts artifacts: '*/target/.jar', allowEmptyArchive: true
        }
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
